// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Optum/cloudig/pkg/aws (interfaces: APIs)

// Package mocks is a generated GoMock package.
package mocks

import (
	athena "github.com/aws/aws-sdk-go/service/athena"
	configservice "github.com/aws/aws-sdk-go/service/configservice"
	ec2 "github.com/aws/aws-sdk-go/service/ec2"
	ecr "github.com/aws/aws-sdk-go/service/ecr"
	health "github.com/aws/aws-sdk-go/service/health"
	support "github.com/aws/aws-sdk-go/service/support"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAPIs is a mock of APIs interface
type MockAPIs struct {
	ctrl     *gomock.Controller
	recorder *MockAPIsMockRecorder
}

// MockAPIsMockRecorder is the mock recorder for MockAPIs
type MockAPIsMockRecorder struct {
	mock *MockAPIs
}

// NewMockAPIs creates a new mock instance
func NewMockAPIs(ctrl *gomock.Controller) *MockAPIs {
	mock := &MockAPIs{ctrl: ctrl}
	mock.recorder = &MockAPIsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPIs) EXPECT() *MockAPIsMockRecorder {
	return m.recorder
}

// CreateTableFromMetadata mocks base method
func (m *MockAPIs) CreateTableFromMetadata(arg0 *athena.TableMetadata) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTableFromMetadata", arg0)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTableFromMetadata indicates an expected call of CreateTableFromMetadata
func (mr *MockAPIsMockRecorder) CreateTableFromMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTableFromMetadata", reflect.TypeOf((*MockAPIs)(nil).CreateTableFromMetadata), arg0)
}

// GenerateReport mocks base method
func (m *MockAPIs) GenerateReport(arg0, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateReport", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateReport indicates an expected call of GenerateReport
func (mr *MockAPIsMockRecorder) GenerateReport(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateReport", reflect.TypeOf((*MockAPIs)(nil).GenerateReport), arg0, arg1, arg2)
}

// GetAccountID mocks base method
func (m *MockAPIs) GetAccountID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountID indicates an expected call of GetAccountID
func (mr *MockAPIsMockRecorder) GetAccountID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountID", reflect.TypeOf((*MockAPIs)(nil).GetAccountID))
}

// GetECRImagesWithTag mocks base method
func (m *MockAPIs) GetECRImagesWithTag(arg0 string) (map[string][]*ecr.ImageDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetECRImagesWithTag", arg0)
	ret0, _ := ret[0].(map[string][]*ecr.ImageDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetECRImageScanFindings mocks base method
func (m *MockAPIs) GetECRImageScanFindings(arg0 *ecr.ImageDetail) map[string]int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetECRImageScanFindings", arg0)
	ret0, _ := ret[0].(map[string]int64)
	return ret0
}

// GetECRImagesWithTag indicates an expected call of GetECRImagesWithTag
func (mr *MockAPIsMockRecorder) GetECRImagesWithTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetECRImagesWithTag", reflect.TypeOf((*MockAPIs)(nil).GetECRImagesWithTag), arg0)
}

// GetFailingTrustedAdvisorCheckResults mocks base method
func (m *MockAPIs) GetFailingTrustedAdvisorCheckResults() (map[*support.TrustedAdvisorCheckDescription]*support.TrustedAdvisorCheckResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailingTrustedAdvisorCheckResults")
	ret0, _ := ret[0].(map[*support.TrustedAdvisorCheckDescription]*support.TrustedAdvisorCheckResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailingTrustedAdvisorCheckResults indicates an expected call of GetFailingTrustedAdvisorCheckResults
func (mr *MockAPIsMockRecorder) GetFailingTrustedAdvisorCheckResults() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailingTrustedAdvisorCheckResults", reflect.TypeOf((*MockAPIs)(nil).GetFailingTrustedAdvisorCheckResults))
}

// GetHealthAffectedEntities mocks base method
func (m *MockAPIs) GetHealthAffectedEntities(arg0 []*string, arg1 *string) (*health.DescribeAffectedEntitiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthAffectedEntities", arg0, arg1)
	ret0, _ := ret[0].(*health.DescribeAffectedEntitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealthAffectedEntities indicates an expected call of GetHealthAffectedEntities
func (mr *MockAPIsMockRecorder) GetHealthAffectedEntities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthAffectedEntities", reflect.TypeOf((*MockAPIs)(nil).GetHealthAffectedEntities), arg0, arg1)
}

// GetHealthEventDetails mocks base method
func (m *MockAPIs) GetHealthEventDetails(arg0 []*string) (*health.DescribeEventDetailsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthEventDetails", arg0)
	ret0, _ := ret[0].(*health.DescribeEventDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealthEventDetails indicates an expected call of GetHealthEventDetails
func (mr *MockAPIsMockRecorder) GetHealthEventDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthEventDetails", reflect.TypeOf((*MockAPIs)(nil).GetHealthEventDetails), arg0)
}

// GetHealthEvents mocks base method
func (m *MockAPIs) GetHealthEvents(arg0 *health.EventFilter, arg1 *string) (*health.DescribeEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthEvents", arg0, arg1)
	ret0, _ := ret[0].(*health.DescribeEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealthEvents indicates an expected call of GetHealthEvents
func (mr *MockAPIsMockRecorder) GetHealthEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthEvents", reflect.TypeOf((*MockAPIs)(nil).GetHealthEvents), arg0, arg1)
}

// GetImageInformation mocks base method
func (m *MockAPIs) GetImageInformation(arg0 []string) (*ec2.DescribeImagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageInformation", arg0)
	ret0, _ := ret[0].(*ec2.DescribeImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageInformation indicates an expected call of GetImageInformation
func (mr *MockAPIsMockRecorder) GetImageInformation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageInformation", reflect.TypeOf((*MockAPIs)(nil).GetImageInformation), arg0)
}

// GetInstances mocks base method
func (m *MockAPIs) GetInstances() (*ec2.DescribeInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstances")
	ret0, _ := ret[0].(*ec2.DescribeInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstances indicates an expected call of GetInstances
func (mr *MockAPIsMockRecorder) GetInstances() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstances", reflect.TypeOf((*MockAPIs)(nil).GetInstances))
}

// GetInstancesByFilters mocks base method
func (m *MockAPIs) GetInstancesByFilters(arg0 map[string][]string) (*ec2.DescribeInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesByFilters", arg0)
	ret0, _ := ret[0].(*ec2.DescribeInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesByFilters indicates an expected call of GetInstancesByFilters
func (mr *MockAPIsMockRecorder) GetInstancesByFilters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesByFilters", reflect.TypeOf((*MockAPIs)(nil).GetInstancesByFilters), arg0)
}

// GetInstancesMatchingAllTags mocks base method
func (m *MockAPIs) GetInstancesMatchingAllTags(arg0 map[string]string) (*ec2.DescribeInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesMatchingAllTags", arg0)
	ret0, _ := ret[0].(*ec2.DescribeInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesMatchingAllTags indicates an expected call of GetInstancesMatchingAllTags
func (mr *MockAPIsMockRecorder) GetInstancesMatchingAllTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesMatchingAllTags", reflect.TypeOf((*MockAPIs)(nil).GetInstancesMatchingAllTags), arg0)
}

// GetInstancesMatchingAnyTags mocks base method
func (m *MockAPIs) GetInstancesMatchingAnyTags(arg0 map[string]string) (*ec2.DescribeInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesMatchingAnyTags", arg0)
	ret0, _ := ret[0].(*ec2.DescribeInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesMatchingAnyTags indicates an expected call of GetInstancesMatchingAnyTags
func (mr *MockAPIsMockRecorder) GetInstancesMatchingAnyTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesMatchingAnyTags", reflect.TypeOf((*MockAPIs)(nil).GetInstancesMatchingAnyTags), arg0)
}

// GetMostRecentAssessmentRunInfo mocks base method
func (m *MockAPIs) GetMostRecentAssessmentRunInfo() ([]map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostRecentAssessmentRunInfo")
	ret0, _ := ret[0].([]map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostRecentAssessmentRunInfo indicates an expected call of GetMostRecentAssessmentRunInfo
func (mr *MockAPIsMockRecorder) GetMostRecentAssessmentRunInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostRecentAssessmentRunInfo", reflect.TypeOf((*MockAPIs)(nil).GetMostRecentAssessmentRunInfo))
}

// GetNetIAMPermissionsForRoles mocks base method
func (m *MockAPIs) GetNetIAMPermissionsForRoles(arg0 []string) map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetIAMPermissionsForRoles", arg0)
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// GetNetIAMPermissionsForRoles indicates an expected call of GetNetIAMPermissionsForRoles
func (mr *MockAPIsMockRecorder) GetNetIAMPermissionsForRoles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetIAMPermissionsForRoles", reflect.TypeOf((*MockAPIs)(nil).GetNetIAMPermissionsForRoles), arg0)
}

// GetNonComplaintConfigRules mocks base method
func (m *MockAPIs) GetNonComplaintConfigRules() (map[string][]*configservice.EvaluationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonComplaintConfigRules")
	ret0, _ := ret[0].(map[string][]*configservice.EvaluationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNonComplaintConfigRules indicates an expected call of GetNonComplaintConfigRules
func (mr *MockAPIsMockRecorder) GetNonComplaintConfigRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonComplaintConfigRules", reflect.TypeOf((*MockAPIs)(nil).GetNonComplaintConfigRules))
}

// GetResourceGroupTags mocks base method
func (m *MockAPIs) GetResourceGroupTags(arg0 string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceGroupTags", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceGroupTags indicates an expected call of GetResourceGroupTags
func (mr *MockAPIsMockRecorder) GetResourceGroupTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceGroupTags", reflect.TypeOf((*MockAPIs)(nil).GetResourceGroupTags), arg0)
}

// GetRolesFromTags mocks base method
func (m *MockAPIs) GetRolesFromTags(arg0 map[string]string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesFromTags", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolesFromTags indicates an expected call of GetRolesFromTags
func (mr *MockAPIsMockRecorder) GetRolesFromTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesFromTags", reflect.TypeOf((*MockAPIs)(nil).GetRolesFromTags), arg0)
}

// GetS3LogPrefixForCloudTrail mocks base method
func (m *MockAPIs) GetS3LogPrefixForCloudTrail() (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetS3LogPrefixForCloudTrail")
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetS3LogPrefixForCloudTrail indicates an expected call of GetS3LogPrefixForCloudTrail
func (mr *MockAPIsMockRecorder) GetS3LogPrefixForCloudTrail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetS3LogPrefixForCloudTrail", reflect.TypeOf((*MockAPIs)(nil).GetS3LogPrefixForCloudTrail))
}

// GetTableMetadata mocks base method
func (m *MockAPIs) GetTableMetadata(arg0 string) (*athena.TableMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableMetadata", arg0)
	ret0, _ := ret[0].(*athena.TableMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableMetadata indicates an expected call of GetTableMetadata
func (mr *MockAPIsMockRecorder) GetTableMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableMetadata", reflect.TypeOf((*MockAPIs)(nil).GetTableMetadata), arg0)
}

// GetTableforMetadata mocks base method
func (m *MockAPIs) GetTableforMetadata(arg0 *athena.TableMetadata) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableforMetadata", arg0)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableforMetadata indicates an expected call of GetTableforMetadata
func (mr *MockAPIsMockRecorder) GetTableforMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableforMetadata", reflect.TypeOf((*MockAPIs)(nil).GetTableforMetadata), arg0)
}

// RunQuery mocks base method
func (m *MockAPIs) RunQuery(arg0, arg1 string) (*athena.ResultSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunQuery", arg0, arg1)
	ret0, _ := ret[0].(*athena.ResultSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunQuery indicates an expected call of RunQuery
func (mr *MockAPIsMockRecorder) RunQuery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunQuery", reflect.TypeOf((*MockAPIs)(nil).RunQuery), arg0, arg1)
}
