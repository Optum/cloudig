// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/inspector/inspectoriface (interfaces: InspectorAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	inspector "github.com/aws/aws-sdk-go/service/inspector"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInspectorAPI is a mock of InspectorAPI interface
type MockInspectorAPI struct {
	ctrl     *gomock.Controller
	recorder *MockInspectorAPIMockRecorder
}

// MockInspectorAPIMockRecorder is the mock recorder for MockInspectorAPI
type MockInspectorAPIMockRecorder struct {
	mock *MockInspectorAPI
}

// NewMockInspectorAPI creates a new mock instance
func NewMockInspectorAPI(ctrl *gomock.Controller) *MockInspectorAPI {
	mock := &MockInspectorAPI{ctrl: ctrl}
	mock.recorder = &MockInspectorAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInspectorAPI) EXPECT() *MockInspectorAPIMockRecorder {
	return m.recorder
}

// AddAttributesToFindings mocks base method
func (m *MockInspectorAPI) AddAttributesToFindings(arg0 *inspector.AddAttributesToFindingsInput) (*inspector.AddAttributesToFindingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAttributesToFindings", arg0)
	ret0, _ := ret[0].(*inspector.AddAttributesToFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAttributesToFindings indicates an expected call of AddAttributesToFindings
func (mr *MockInspectorAPIMockRecorder) AddAttributesToFindings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAttributesToFindings", reflect.TypeOf((*MockInspectorAPI)(nil).AddAttributesToFindings), arg0)
}

// AddAttributesToFindingsRequest mocks base method
func (m *MockInspectorAPI) AddAttributesToFindingsRequest(arg0 *inspector.AddAttributesToFindingsInput) (*request.Request, *inspector.AddAttributesToFindingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAttributesToFindingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.AddAttributesToFindingsOutput)
	return ret0, ret1
}

// AddAttributesToFindingsRequest indicates an expected call of AddAttributesToFindingsRequest
func (mr *MockInspectorAPIMockRecorder) AddAttributesToFindingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAttributesToFindingsRequest", reflect.TypeOf((*MockInspectorAPI)(nil).AddAttributesToFindingsRequest), arg0)
}

// AddAttributesToFindingsWithContext mocks base method
func (m *MockInspectorAPI) AddAttributesToFindingsWithContext(arg0 context.Context, arg1 *inspector.AddAttributesToFindingsInput, arg2 ...request.Option) (*inspector.AddAttributesToFindingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAttributesToFindingsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.AddAttributesToFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAttributesToFindingsWithContext indicates an expected call of AddAttributesToFindingsWithContext
func (mr *MockInspectorAPIMockRecorder) AddAttributesToFindingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAttributesToFindingsWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).AddAttributesToFindingsWithContext), varargs...)
}

// CreateAssessmentTarget mocks base method
func (m *MockInspectorAPI) CreateAssessmentTarget(arg0 *inspector.CreateAssessmentTargetInput) (*inspector.CreateAssessmentTargetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssessmentTarget", arg0)
	ret0, _ := ret[0].(*inspector.CreateAssessmentTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssessmentTarget indicates an expected call of CreateAssessmentTarget
func (mr *MockInspectorAPIMockRecorder) CreateAssessmentTarget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssessmentTarget", reflect.TypeOf((*MockInspectorAPI)(nil).CreateAssessmentTarget), arg0)
}

// CreateAssessmentTargetRequest mocks base method
func (m *MockInspectorAPI) CreateAssessmentTargetRequest(arg0 *inspector.CreateAssessmentTargetInput) (*request.Request, *inspector.CreateAssessmentTargetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssessmentTargetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.CreateAssessmentTargetOutput)
	return ret0, ret1
}

// CreateAssessmentTargetRequest indicates an expected call of CreateAssessmentTargetRequest
func (mr *MockInspectorAPIMockRecorder) CreateAssessmentTargetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssessmentTargetRequest", reflect.TypeOf((*MockInspectorAPI)(nil).CreateAssessmentTargetRequest), arg0)
}

// CreateAssessmentTargetWithContext mocks base method
func (m *MockInspectorAPI) CreateAssessmentTargetWithContext(arg0 context.Context, arg1 *inspector.CreateAssessmentTargetInput, arg2 ...request.Option) (*inspector.CreateAssessmentTargetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAssessmentTargetWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.CreateAssessmentTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssessmentTargetWithContext indicates an expected call of CreateAssessmentTargetWithContext
func (mr *MockInspectorAPIMockRecorder) CreateAssessmentTargetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssessmentTargetWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).CreateAssessmentTargetWithContext), varargs...)
}

// CreateAssessmentTemplate mocks base method
func (m *MockInspectorAPI) CreateAssessmentTemplate(arg0 *inspector.CreateAssessmentTemplateInput) (*inspector.CreateAssessmentTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssessmentTemplate", arg0)
	ret0, _ := ret[0].(*inspector.CreateAssessmentTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssessmentTemplate indicates an expected call of CreateAssessmentTemplate
func (mr *MockInspectorAPIMockRecorder) CreateAssessmentTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssessmentTemplate", reflect.TypeOf((*MockInspectorAPI)(nil).CreateAssessmentTemplate), arg0)
}

// CreateAssessmentTemplateRequest mocks base method
func (m *MockInspectorAPI) CreateAssessmentTemplateRequest(arg0 *inspector.CreateAssessmentTemplateInput) (*request.Request, *inspector.CreateAssessmentTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssessmentTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.CreateAssessmentTemplateOutput)
	return ret0, ret1
}

// CreateAssessmentTemplateRequest indicates an expected call of CreateAssessmentTemplateRequest
func (mr *MockInspectorAPIMockRecorder) CreateAssessmentTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssessmentTemplateRequest", reflect.TypeOf((*MockInspectorAPI)(nil).CreateAssessmentTemplateRequest), arg0)
}

// CreateAssessmentTemplateWithContext mocks base method
func (m *MockInspectorAPI) CreateAssessmentTemplateWithContext(arg0 context.Context, arg1 *inspector.CreateAssessmentTemplateInput, arg2 ...request.Option) (*inspector.CreateAssessmentTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAssessmentTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.CreateAssessmentTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssessmentTemplateWithContext indicates an expected call of CreateAssessmentTemplateWithContext
func (mr *MockInspectorAPIMockRecorder) CreateAssessmentTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssessmentTemplateWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).CreateAssessmentTemplateWithContext), varargs...)
}

// CreateExclusionsPreview mocks base method
func (m *MockInspectorAPI) CreateExclusionsPreview(arg0 *inspector.CreateExclusionsPreviewInput) (*inspector.CreateExclusionsPreviewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExclusionsPreview", arg0)
	ret0, _ := ret[0].(*inspector.CreateExclusionsPreviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExclusionsPreview indicates an expected call of CreateExclusionsPreview
func (mr *MockInspectorAPIMockRecorder) CreateExclusionsPreview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExclusionsPreview", reflect.TypeOf((*MockInspectorAPI)(nil).CreateExclusionsPreview), arg0)
}

// CreateExclusionsPreviewRequest mocks base method
func (m *MockInspectorAPI) CreateExclusionsPreviewRequest(arg0 *inspector.CreateExclusionsPreviewInput) (*request.Request, *inspector.CreateExclusionsPreviewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExclusionsPreviewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.CreateExclusionsPreviewOutput)
	return ret0, ret1
}

// CreateExclusionsPreviewRequest indicates an expected call of CreateExclusionsPreviewRequest
func (mr *MockInspectorAPIMockRecorder) CreateExclusionsPreviewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExclusionsPreviewRequest", reflect.TypeOf((*MockInspectorAPI)(nil).CreateExclusionsPreviewRequest), arg0)
}

// CreateExclusionsPreviewWithContext mocks base method
func (m *MockInspectorAPI) CreateExclusionsPreviewWithContext(arg0 context.Context, arg1 *inspector.CreateExclusionsPreviewInput, arg2 ...request.Option) (*inspector.CreateExclusionsPreviewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExclusionsPreviewWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.CreateExclusionsPreviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExclusionsPreviewWithContext indicates an expected call of CreateExclusionsPreviewWithContext
func (mr *MockInspectorAPIMockRecorder) CreateExclusionsPreviewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExclusionsPreviewWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).CreateExclusionsPreviewWithContext), varargs...)
}

// CreateResourceGroup mocks base method
func (m *MockInspectorAPI) CreateResourceGroup(arg0 *inspector.CreateResourceGroupInput) (*inspector.CreateResourceGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourceGroup", arg0)
	ret0, _ := ret[0].(*inspector.CreateResourceGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourceGroup indicates an expected call of CreateResourceGroup
func (mr *MockInspectorAPIMockRecorder) CreateResourceGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceGroup", reflect.TypeOf((*MockInspectorAPI)(nil).CreateResourceGroup), arg0)
}

// CreateResourceGroupRequest mocks base method
func (m *MockInspectorAPI) CreateResourceGroupRequest(arg0 *inspector.CreateResourceGroupInput) (*request.Request, *inspector.CreateResourceGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourceGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.CreateResourceGroupOutput)
	return ret0, ret1
}

// CreateResourceGroupRequest indicates an expected call of CreateResourceGroupRequest
func (mr *MockInspectorAPIMockRecorder) CreateResourceGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceGroupRequest", reflect.TypeOf((*MockInspectorAPI)(nil).CreateResourceGroupRequest), arg0)
}

// CreateResourceGroupWithContext mocks base method
func (m *MockInspectorAPI) CreateResourceGroupWithContext(arg0 context.Context, arg1 *inspector.CreateResourceGroupInput, arg2 ...request.Option) (*inspector.CreateResourceGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateResourceGroupWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.CreateResourceGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourceGroupWithContext indicates an expected call of CreateResourceGroupWithContext
func (mr *MockInspectorAPIMockRecorder) CreateResourceGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceGroupWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).CreateResourceGroupWithContext), varargs...)
}

// DeleteAssessmentRun mocks base method
func (m *MockInspectorAPI) DeleteAssessmentRun(arg0 *inspector.DeleteAssessmentRunInput) (*inspector.DeleteAssessmentRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssessmentRun", arg0)
	ret0, _ := ret[0].(*inspector.DeleteAssessmentRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssessmentRun indicates an expected call of DeleteAssessmentRun
func (mr *MockInspectorAPIMockRecorder) DeleteAssessmentRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssessmentRun", reflect.TypeOf((*MockInspectorAPI)(nil).DeleteAssessmentRun), arg0)
}

// DeleteAssessmentRunRequest mocks base method
func (m *MockInspectorAPI) DeleteAssessmentRunRequest(arg0 *inspector.DeleteAssessmentRunInput) (*request.Request, *inspector.DeleteAssessmentRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssessmentRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.DeleteAssessmentRunOutput)
	return ret0, ret1
}

// DeleteAssessmentRunRequest indicates an expected call of DeleteAssessmentRunRequest
func (mr *MockInspectorAPIMockRecorder) DeleteAssessmentRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssessmentRunRequest", reflect.TypeOf((*MockInspectorAPI)(nil).DeleteAssessmentRunRequest), arg0)
}

// DeleteAssessmentRunWithContext mocks base method
func (m *MockInspectorAPI) DeleteAssessmentRunWithContext(arg0 context.Context, arg1 *inspector.DeleteAssessmentRunInput, arg2 ...request.Option) (*inspector.DeleteAssessmentRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAssessmentRunWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.DeleteAssessmentRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssessmentRunWithContext indicates an expected call of DeleteAssessmentRunWithContext
func (mr *MockInspectorAPIMockRecorder) DeleteAssessmentRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssessmentRunWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).DeleteAssessmentRunWithContext), varargs...)
}

// DeleteAssessmentTarget mocks base method
func (m *MockInspectorAPI) DeleteAssessmentTarget(arg0 *inspector.DeleteAssessmentTargetInput) (*inspector.DeleteAssessmentTargetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssessmentTarget", arg0)
	ret0, _ := ret[0].(*inspector.DeleteAssessmentTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssessmentTarget indicates an expected call of DeleteAssessmentTarget
func (mr *MockInspectorAPIMockRecorder) DeleteAssessmentTarget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssessmentTarget", reflect.TypeOf((*MockInspectorAPI)(nil).DeleteAssessmentTarget), arg0)
}

// DeleteAssessmentTargetRequest mocks base method
func (m *MockInspectorAPI) DeleteAssessmentTargetRequest(arg0 *inspector.DeleteAssessmentTargetInput) (*request.Request, *inspector.DeleteAssessmentTargetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssessmentTargetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.DeleteAssessmentTargetOutput)
	return ret0, ret1
}

// DeleteAssessmentTargetRequest indicates an expected call of DeleteAssessmentTargetRequest
func (mr *MockInspectorAPIMockRecorder) DeleteAssessmentTargetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssessmentTargetRequest", reflect.TypeOf((*MockInspectorAPI)(nil).DeleteAssessmentTargetRequest), arg0)
}

// DeleteAssessmentTargetWithContext mocks base method
func (m *MockInspectorAPI) DeleteAssessmentTargetWithContext(arg0 context.Context, arg1 *inspector.DeleteAssessmentTargetInput, arg2 ...request.Option) (*inspector.DeleteAssessmentTargetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAssessmentTargetWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.DeleteAssessmentTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssessmentTargetWithContext indicates an expected call of DeleteAssessmentTargetWithContext
func (mr *MockInspectorAPIMockRecorder) DeleteAssessmentTargetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssessmentTargetWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).DeleteAssessmentTargetWithContext), varargs...)
}

// DeleteAssessmentTemplate mocks base method
func (m *MockInspectorAPI) DeleteAssessmentTemplate(arg0 *inspector.DeleteAssessmentTemplateInput) (*inspector.DeleteAssessmentTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssessmentTemplate", arg0)
	ret0, _ := ret[0].(*inspector.DeleteAssessmentTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssessmentTemplate indicates an expected call of DeleteAssessmentTemplate
func (mr *MockInspectorAPIMockRecorder) DeleteAssessmentTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssessmentTemplate", reflect.TypeOf((*MockInspectorAPI)(nil).DeleteAssessmentTemplate), arg0)
}

// DeleteAssessmentTemplateRequest mocks base method
func (m *MockInspectorAPI) DeleteAssessmentTemplateRequest(arg0 *inspector.DeleteAssessmentTemplateInput) (*request.Request, *inspector.DeleteAssessmentTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssessmentTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.DeleteAssessmentTemplateOutput)
	return ret0, ret1
}

// DeleteAssessmentTemplateRequest indicates an expected call of DeleteAssessmentTemplateRequest
func (mr *MockInspectorAPIMockRecorder) DeleteAssessmentTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssessmentTemplateRequest", reflect.TypeOf((*MockInspectorAPI)(nil).DeleteAssessmentTemplateRequest), arg0)
}

// DeleteAssessmentTemplateWithContext mocks base method
func (m *MockInspectorAPI) DeleteAssessmentTemplateWithContext(arg0 context.Context, arg1 *inspector.DeleteAssessmentTemplateInput, arg2 ...request.Option) (*inspector.DeleteAssessmentTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAssessmentTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.DeleteAssessmentTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssessmentTemplateWithContext indicates an expected call of DeleteAssessmentTemplateWithContext
func (mr *MockInspectorAPIMockRecorder) DeleteAssessmentTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssessmentTemplateWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).DeleteAssessmentTemplateWithContext), varargs...)
}

// DescribeAssessmentRuns mocks base method
func (m *MockInspectorAPI) DescribeAssessmentRuns(arg0 *inspector.DescribeAssessmentRunsInput) (*inspector.DescribeAssessmentRunsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAssessmentRuns", arg0)
	ret0, _ := ret[0].(*inspector.DescribeAssessmentRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAssessmentRuns indicates an expected call of DescribeAssessmentRuns
func (mr *MockInspectorAPIMockRecorder) DescribeAssessmentRuns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAssessmentRuns", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeAssessmentRuns), arg0)
}

// DescribeAssessmentRunsRequest mocks base method
func (m *MockInspectorAPI) DescribeAssessmentRunsRequest(arg0 *inspector.DescribeAssessmentRunsInput) (*request.Request, *inspector.DescribeAssessmentRunsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAssessmentRunsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.DescribeAssessmentRunsOutput)
	return ret0, ret1
}

// DescribeAssessmentRunsRequest indicates an expected call of DescribeAssessmentRunsRequest
func (mr *MockInspectorAPIMockRecorder) DescribeAssessmentRunsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAssessmentRunsRequest", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeAssessmentRunsRequest), arg0)
}

// DescribeAssessmentRunsWithContext mocks base method
func (m *MockInspectorAPI) DescribeAssessmentRunsWithContext(arg0 context.Context, arg1 *inspector.DescribeAssessmentRunsInput, arg2 ...request.Option) (*inspector.DescribeAssessmentRunsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAssessmentRunsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.DescribeAssessmentRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAssessmentRunsWithContext indicates an expected call of DescribeAssessmentRunsWithContext
func (mr *MockInspectorAPIMockRecorder) DescribeAssessmentRunsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAssessmentRunsWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeAssessmentRunsWithContext), varargs...)
}

// DescribeAssessmentTargets mocks base method
func (m *MockInspectorAPI) DescribeAssessmentTargets(arg0 *inspector.DescribeAssessmentTargetsInput) (*inspector.DescribeAssessmentTargetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAssessmentTargets", arg0)
	ret0, _ := ret[0].(*inspector.DescribeAssessmentTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAssessmentTargets indicates an expected call of DescribeAssessmentTargets
func (mr *MockInspectorAPIMockRecorder) DescribeAssessmentTargets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAssessmentTargets", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeAssessmentTargets), arg0)
}

// DescribeAssessmentTargetsRequest mocks base method
func (m *MockInspectorAPI) DescribeAssessmentTargetsRequest(arg0 *inspector.DescribeAssessmentTargetsInput) (*request.Request, *inspector.DescribeAssessmentTargetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAssessmentTargetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.DescribeAssessmentTargetsOutput)
	return ret0, ret1
}

// DescribeAssessmentTargetsRequest indicates an expected call of DescribeAssessmentTargetsRequest
func (mr *MockInspectorAPIMockRecorder) DescribeAssessmentTargetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAssessmentTargetsRequest", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeAssessmentTargetsRequest), arg0)
}

// DescribeAssessmentTargetsWithContext mocks base method
func (m *MockInspectorAPI) DescribeAssessmentTargetsWithContext(arg0 context.Context, arg1 *inspector.DescribeAssessmentTargetsInput, arg2 ...request.Option) (*inspector.DescribeAssessmentTargetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAssessmentTargetsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.DescribeAssessmentTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAssessmentTargetsWithContext indicates an expected call of DescribeAssessmentTargetsWithContext
func (mr *MockInspectorAPIMockRecorder) DescribeAssessmentTargetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAssessmentTargetsWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeAssessmentTargetsWithContext), varargs...)
}

// DescribeAssessmentTemplates mocks base method
func (m *MockInspectorAPI) DescribeAssessmentTemplates(arg0 *inspector.DescribeAssessmentTemplatesInput) (*inspector.DescribeAssessmentTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAssessmentTemplates", arg0)
	ret0, _ := ret[0].(*inspector.DescribeAssessmentTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAssessmentTemplates indicates an expected call of DescribeAssessmentTemplates
func (mr *MockInspectorAPIMockRecorder) DescribeAssessmentTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAssessmentTemplates", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeAssessmentTemplates), arg0)
}

// DescribeAssessmentTemplatesRequest mocks base method
func (m *MockInspectorAPI) DescribeAssessmentTemplatesRequest(arg0 *inspector.DescribeAssessmentTemplatesInput) (*request.Request, *inspector.DescribeAssessmentTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAssessmentTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.DescribeAssessmentTemplatesOutput)
	return ret0, ret1
}

// DescribeAssessmentTemplatesRequest indicates an expected call of DescribeAssessmentTemplatesRequest
func (mr *MockInspectorAPIMockRecorder) DescribeAssessmentTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAssessmentTemplatesRequest", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeAssessmentTemplatesRequest), arg0)
}

// DescribeAssessmentTemplatesWithContext mocks base method
func (m *MockInspectorAPI) DescribeAssessmentTemplatesWithContext(arg0 context.Context, arg1 *inspector.DescribeAssessmentTemplatesInput, arg2 ...request.Option) (*inspector.DescribeAssessmentTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAssessmentTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.DescribeAssessmentTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAssessmentTemplatesWithContext indicates an expected call of DescribeAssessmentTemplatesWithContext
func (mr *MockInspectorAPIMockRecorder) DescribeAssessmentTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAssessmentTemplatesWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeAssessmentTemplatesWithContext), varargs...)
}

// DescribeCrossAccountAccessRole mocks base method
func (m *MockInspectorAPI) DescribeCrossAccountAccessRole(arg0 *inspector.DescribeCrossAccountAccessRoleInput) (*inspector.DescribeCrossAccountAccessRoleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCrossAccountAccessRole", arg0)
	ret0, _ := ret[0].(*inspector.DescribeCrossAccountAccessRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCrossAccountAccessRole indicates an expected call of DescribeCrossAccountAccessRole
func (mr *MockInspectorAPIMockRecorder) DescribeCrossAccountAccessRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCrossAccountAccessRole", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeCrossAccountAccessRole), arg0)
}

// DescribeCrossAccountAccessRoleRequest mocks base method
func (m *MockInspectorAPI) DescribeCrossAccountAccessRoleRequest(arg0 *inspector.DescribeCrossAccountAccessRoleInput) (*request.Request, *inspector.DescribeCrossAccountAccessRoleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCrossAccountAccessRoleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.DescribeCrossAccountAccessRoleOutput)
	return ret0, ret1
}

// DescribeCrossAccountAccessRoleRequest indicates an expected call of DescribeCrossAccountAccessRoleRequest
func (mr *MockInspectorAPIMockRecorder) DescribeCrossAccountAccessRoleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCrossAccountAccessRoleRequest", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeCrossAccountAccessRoleRequest), arg0)
}

// DescribeCrossAccountAccessRoleWithContext mocks base method
func (m *MockInspectorAPI) DescribeCrossAccountAccessRoleWithContext(arg0 context.Context, arg1 *inspector.DescribeCrossAccountAccessRoleInput, arg2 ...request.Option) (*inspector.DescribeCrossAccountAccessRoleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCrossAccountAccessRoleWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.DescribeCrossAccountAccessRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCrossAccountAccessRoleWithContext indicates an expected call of DescribeCrossAccountAccessRoleWithContext
func (mr *MockInspectorAPIMockRecorder) DescribeCrossAccountAccessRoleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCrossAccountAccessRoleWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeCrossAccountAccessRoleWithContext), varargs...)
}

// DescribeExclusions mocks base method
func (m *MockInspectorAPI) DescribeExclusions(arg0 *inspector.DescribeExclusionsInput) (*inspector.DescribeExclusionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeExclusions", arg0)
	ret0, _ := ret[0].(*inspector.DescribeExclusionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeExclusions indicates an expected call of DescribeExclusions
func (mr *MockInspectorAPIMockRecorder) DescribeExclusions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExclusions", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeExclusions), arg0)
}

// DescribeExclusionsRequest mocks base method
func (m *MockInspectorAPI) DescribeExclusionsRequest(arg0 *inspector.DescribeExclusionsInput) (*request.Request, *inspector.DescribeExclusionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeExclusionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.DescribeExclusionsOutput)
	return ret0, ret1
}

// DescribeExclusionsRequest indicates an expected call of DescribeExclusionsRequest
func (mr *MockInspectorAPIMockRecorder) DescribeExclusionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExclusionsRequest", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeExclusionsRequest), arg0)
}

// DescribeExclusionsWithContext mocks base method
func (m *MockInspectorAPI) DescribeExclusionsWithContext(arg0 context.Context, arg1 *inspector.DescribeExclusionsInput, arg2 ...request.Option) (*inspector.DescribeExclusionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeExclusionsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.DescribeExclusionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeExclusionsWithContext indicates an expected call of DescribeExclusionsWithContext
func (mr *MockInspectorAPIMockRecorder) DescribeExclusionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExclusionsWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeExclusionsWithContext), varargs...)
}

// DescribeFindings mocks base method
func (m *MockInspectorAPI) DescribeFindings(arg0 *inspector.DescribeFindingsInput) (*inspector.DescribeFindingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFindings", arg0)
	ret0, _ := ret[0].(*inspector.DescribeFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFindings indicates an expected call of DescribeFindings
func (mr *MockInspectorAPIMockRecorder) DescribeFindings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFindings", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeFindings), arg0)
}

// DescribeFindingsRequest mocks base method
func (m *MockInspectorAPI) DescribeFindingsRequest(arg0 *inspector.DescribeFindingsInput) (*request.Request, *inspector.DescribeFindingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFindingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.DescribeFindingsOutput)
	return ret0, ret1
}

// DescribeFindingsRequest indicates an expected call of DescribeFindingsRequest
func (mr *MockInspectorAPIMockRecorder) DescribeFindingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFindingsRequest", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeFindingsRequest), arg0)
}

// DescribeFindingsWithContext mocks base method
func (m *MockInspectorAPI) DescribeFindingsWithContext(arg0 context.Context, arg1 *inspector.DescribeFindingsInput, arg2 ...request.Option) (*inspector.DescribeFindingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFindingsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.DescribeFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFindingsWithContext indicates an expected call of DescribeFindingsWithContext
func (mr *MockInspectorAPIMockRecorder) DescribeFindingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFindingsWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeFindingsWithContext), varargs...)
}

// DescribeResourceGroups mocks base method
func (m *MockInspectorAPI) DescribeResourceGroups(arg0 *inspector.DescribeResourceGroupsInput) (*inspector.DescribeResourceGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResourceGroups", arg0)
	ret0, _ := ret[0].(*inspector.DescribeResourceGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeResourceGroups indicates an expected call of DescribeResourceGroups
func (mr *MockInspectorAPIMockRecorder) DescribeResourceGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourceGroups", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeResourceGroups), arg0)
}

// DescribeResourceGroupsRequest mocks base method
func (m *MockInspectorAPI) DescribeResourceGroupsRequest(arg0 *inspector.DescribeResourceGroupsInput) (*request.Request, *inspector.DescribeResourceGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResourceGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.DescribeResourceGroupsOutput)
	return ret0, ret1
}

// DescribeResourceGroupsRequest indicates an expected call of DescribeResourceGroupsRequest
func (mr *MockInspectorAPIMockRecorder) DescribeResourceGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourceGroupsRequest", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeResourceGroupsRequest), arg0)
}

// DescribeResourceGroupsWithContext mocks base method
func (m *MockInspectorAPI) DescribeResourceGroupsWithContext(arg0 context.Context, arg1 *inspector.DescribeResourceGroupsInput, arg2 ...request.Option) (*inspector.DescribeResourceGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeResourceGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.DescribeResourceGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeResourceGroupsWithContext indicates an expected call of DescribeResourceGroupsWithContext
func (mr *MockInspectorAPIMockRecorder) DescribeResourceGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourceGroupsWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeResourceGroupsWithContext), varargs...)
}

// DescribeRulesPackages mocks base method
func (m *MockInspectorAPI) DescribeRulesPackages(arg0 *inspector.DescribeRulesPackagesInput) (*inspector.DescribeRulesPackagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRulesPackages", arg0)
	ret0, _ := ret[0].(*inspector.DescribeRulesPackagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRulesPackages indicates an expected call of DescribeRulesPackages
func (mr *MockInspectorAPIMockRecorder) DescribeRulesPackages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRulesPackages", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeRulesPackages), arg0)
}

// DescribeRulesPackagesRequest mocks base method
func (m *MockInspectorAPI) DescribeRulesPackagesRequest(arg0 *inspector.DescribeRulesPackagesInput) (*request.Request, *inspector.DescribeRulesPackagesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRulesPackagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.DescribeRulesPackagesOutput)
	return ret0, ret1
}

// DescribeRulesPackagesRequest indicates an expected call of DescribeRulesPackagesRequest
func (mr *MockInspectorAPIMockRecorder) DescribeRulesPackagesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRulesPackagesRequest", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeRulesPackagesRequest), arg0)
}

// DescribeRulesPackagesWithContext mocks base method
func (m *MockInspectorAPI) DescribeRulesPackagesWithContext(arg0 context.Context, arg1 *inspector.DescribeRulesPackagesInput, arg2 ...request.Option) (*inspector.DescribeRulesPackagesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRulesPackagesWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.DescribeRulesPackagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRulesPackagesWithContext indicates an expected call of DescribeRulesPackagesWithContext
func (mr *MockInspectorAPIMockRecorder) DescribeRulesPackagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRulesPackagesWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).DescribeRulesPackagesWithContext), varargs...)
}

// GetAssessmentReport mocks base method
func (m *MockInspectorAPI) GetAssessmentReport(arg0 *inspector.GetAssessmentReportInput) (*inspector.GetAssessmentReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssessmentReport", arg0)
	ret0, _ := ret[0].(*inspector.GetAssessmentReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssessmentReport indicates an expected call of GetAssessmentReport
func (mr *MockInspectorAPIMockRecorder) GetAssessmentReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssessmentReport", reflect.TypeOf((*MockInspectorAPI)(nil).GetAssessmentReport), arg0)
}

// GetAssessmentReportRequest mocks base method
func (m *MockInspectorAPI) GetAssessmentReportRequest(arg0 *inspector.GetAssessmentReportInput) (*request.Request, *inspector.GetAssessmentReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssessmentReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.GetAssessmentReportOutput)
	return ret0, ret1
}

// GetAssessmentReportRequest indicates an expected call of GetAssessmentReportRequest
func (mr *MockInspectorAPIMockRecorder) GetAssessmentReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssessmentReportRequest", reflect.TypeOf((*MockInspectorAPI)(nil).GetAssessmentReportRequest), arg0)
}

// GetAssessmentReportWithContext mocks base method
func (m *MockInspectorAPI) GetAssessmentReportWithContext(arg0 context.Context, arg1 *inspector.GetAssessmentReportInput, arg2 ...request.Option) (*inspector.GetAssessmentReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssessmentReportWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.GetAssessmentReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssessmentReportWithContext indicates an expected call of GetAssessmentReportWithContext
func (mr *MockInspectorAPIMockRecorder) GetAssessmentReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssessmentReportWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).GetAssessmentReportWithContext), varargs...)
}

// GetExclusionsPreview mocks base method
func (m *MockInspectorAPI) GetExclusionsPreview(arg0 *inspector.GetExclusionsPreviewInput) (*inspector.GetExclusionsPreviewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExclusionsPreview", arg0)
	ret0, _ := ret[0].(*inspector.GetExclusionsPreviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExclusionsPreview indicates an expected call of GetExclusionsPreview
func (mr *MockInspectorAPIMockRecorder) GetExclusionsPreview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExclusionsPreview", reflect.TypeOf((*MockInspectorAPI)(nil).GetExclusionsPreview), arg0)
}

// GetExclusionsPreviewPages mocks base method
func (m *MockInspectorAPI) GetExclusionsPreviewPages(arg0 *inspector.GetExclusionsPreviewInput, arg1 func(*inspector.GetExclusionsPreviewOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExclusionsPreviewPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetExclusionsPreviewPages indicates an expected call of GetExclusionsPreviewPages
func (mr *MockInspectorAPIMockRecorder) GetExclusionsPreviewPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExclusionsPreviewPages", reflect.TypeOf((*MockInspectorAPI)(nil).GetExclusionsPreviewPages), arg0, arg1)
}

// GetExclusionsPreviewPagesWithContext mocks base method
func (m *MockInspectorAPI) GetExclusionsPreviewPagesWithContext(arg0 context.Context, arg1 *inspector.GetExclusionsPreviewInput, arg2 func(*inspector.GetExclusionsPreviewOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExclusionsPreviewPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetExclusionsPreviewPagesWithContext indicates an expected call of GetExclusionsPreviewPagesWithContext
func (mr *MockInspectorAPIMockRecorder) GetExclusionsPreviewPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExclusionsPreviewPagesWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).GetExclusionsPreviewPagesWithContext), varargs...)
}

// GetExclusionsPreviewRequest mocks base method
func (m *MockInspectorAPI) GetExclusionsPreviewRequest(arg0 *inspector.GetExclusionsPreviewInput) (*request.Request, *inspector.GetExclusionsPreviewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExclusionsPreviewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.GetExclusionsPreviewOutput)
	return ret0, ret1
}

// GetExclusionsPreviewRequest indicates an expected call of GetExclusionsPreviewRequest
func (mr *MockInspectorAPIMockRecorder) GetExclusionsPreviewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExclusionsPreviewRequest", reflect.TypeOf((*MockInspectorAPI)(nil).GetExclusionsPreviewRequest), arg0)
}

// GetExclusionsPreviewWithContext mocks base method
func (m *MockInspectorAPI) GetExclusionsPreviewWithContext(arg0 context.Context, arg1 *inspector.GetExclusionsPreviewInput, arg2 ...request.Option) (*inspector.GetExclusionsPreviewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExclusionsPreviewWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.GetExclusionsPreviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExclusionsPreviewWithContext indicates an expected call of GetExclusionsPreviewWithContext
func (mr *MockInspectorAPIMockRecorder) GetExclusionsPreviewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExclusionsPreviewWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).GetExclusionsPreviewWithContext), varargs...)
}

// GetTelemetryMetadata mocks base method
func (m *MockInspectorAPI) GetTelemetryMetadata(arg0 *inspector.GetTelemetryMetadataInput) (*inspector.GetTelemetryMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTelemetryMetadata", arg0)
	ret0, _ := ret[0].(*inspector.GetTelemetryMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTelemetryMetadata indicates an expected call of GetTelemetryMetadata
func (mr *MockInspectorAPIMockRecorder) GetTelemetryMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTelemetryMetadata", reflect.TypeOf((*MockInspectorAPI)(nil).GetTelemetryMetadata), arg0)
}

// GetTelemetryMetadataRequest mocks base method
func (m *MockInspectorAPI) GetTelemetryMetadataRequest(arg0 *inspector.GetTelemetryMetadataInput) (*request.Request, *inspector.GetTelemetryMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTelemetryMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.GetTelemetryMetadataOutput)
	return ret0, ret1
}

// GetTelemetryMetadataRequest indicates an expected call of GetTelemetryMetadataRequest
func (mr *MockInspectorAPIMockRecorder) GetTelemetryMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTelemetryMetadataRequest", reflect.TypeOf((*MockInspectorAPI)(nil).GetTelemetryMetadataRequest), arg0)
}

// GetTelemetryMetadataWithContext mocks base method
func (m *MockInspectorAPI) GetTelemetryMetadataWithContext(arg0 context.Context, arg1 *inspector.GetTelemetryMetadataInput, arg2 ...request.Option) (*inspector.GetTelemetryMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTelemetryMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.GetTelemetryMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTelemetryMetadataWithContext indicates an expected call of GetTelemetryMetadataWithContext
func (mr *MockInspectorAPIMockRecorder) GetTelemetryMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTelemetryMetadataWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).GetTelemetryMetadataWithContext), varargs...)
}

// ListAssessmentRunAgents mocks base method
func (m *MockInspectorAPI) ListAssessmentRunAgents(arg0 *inspector.ListAssessmentRunAgentsInput) (*inspector.ListAssessmentRunAgentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentRunAgents", arg0)
	ret0, _ := ret[0].(*inspector.ListAssessmentRunAgentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessmentRunAgents indicates an expected call of ListAssessmentRunAgents
func (mr *MockInspectorAPIMockRecorder) ListAssessmentRunAgents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentRunAgents", reflect.TypeOf((*MockInspectorAPI)(nil).ListAssessmentRunAgents), arg0)
}

// ListAssessmentRunAgentsPages mocks base method
func (m *MockInspectorAPI) ListAssessmentRunAgentsPages(arg0 *inspector.ListAssessmentRunAgentsInput, arg1 func(*inspector.ListAssessmentRunAgentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentRunAgentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssessmentRunAgentsPages indicates an expected call of ListAssessmentRunAgentsPages
func (mr *MockInspectorAPIMockRecorder) ListAssessmentRunAgentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentRunAgentsPages", reflect.TypeOf((*MockInspectorAPI)(nil).ListAssessmentRunAgentsPages), arg0, arg1)
}

// ListAssessmentRunAgentsPagesWithContext mocks base method
func (m *MockInspectorAPI) ListAssessmentRunAgentsPagesWithContext(arg0 context.Context, arg1 *inspector.ListAssessmentRunAgentsInput, arg2 func(*inspector.ListAssessmentRunAgentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessmentRunAgentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssessmentRunAgentsPagesWithContext indicates an expected call of ListAssessmentRunAgentsPagesWithContext
func (mr *MockInspectorAPIMockRecorder) ListAssessmentRunAgentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentRunAgentsPagesWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).ListAssessmentRunAgentsPagesWithContext), varargs...)
}

// ListAssessmentRunAgentsRequest mocks base method
func (m *MockInspectorAPI) ListAssessmentRunAgentsRequest(arg0 *inspector.ListAssessmentRunAgentsInput) (*request.Request, *inspector.ListAssessmentRunAgentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentRunAgentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.ListAssessmentRunAgentsOutput)
	return ret0, ret1
}

// ListAssessmentRunAgentsRequest indicates an expected call of ListAssessmentRunAgentsRequest
func (mr *MockInspectorAPIMockRecorder) ListAssessmentRunAgentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentRunAgentsRequest", reflect.TypeOf((*MockInspectorAPI)(nil).ListAssessmentRunAgentsRequest), arg0)
}

// ListAssessmentRunAgentsWithContext mocks base method
func (m *MockInspectorAPI) ListAssessmentRunAgentsWithContext(arg0 context.Context, arg1 *inspector.ListAssessmentRunAgentsInput, arg2 ...request.Option) (*inspector.ListAssessmentRunAgentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessmentRunAgentsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.ListAssessmentRunAgentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessmentRunAgentsWithContext indicates an expected call of ListAssessmentRunAgentsWithContext
func (mr *MockInspectorAPIMockRecorder) ListAssessmentRunAgentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentRunAgentsWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).ListAssessmentRunAgentsWithContext), varargs...)
}

// ListAssessmentRuns mocks base method
func (m *MockInspectorAPI) ListAssessmentRuns(arg0 *inspector.ListAssessmentRunsInput) (*inspector.ListAssessmentRunsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentRuns", arg0)
	ret0, _ := ret[0].(*inspector.ListAssessmentRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessmentRuns indicates an expected call of ListAssessmentRuns
func (mr *MockInspectorAPIMockRecorder) ListAssessmentRuns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentRuns", reflect.TypeOf((*MockInspectorAPI)(nil).ListAssessmentRuns), arg0)
}

// ListAssessmentRunsPages mocks base method
func (m *MockInspectorAPI) ListAssessmentRunsPages(arg0 *inspector.ListAssessmentRunsInput, arg1 func(*inspector.ListAssessmentRunsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentRunsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssessmentRunsPages indicates an expected call of ListAssessmentRunsPages
func (mr *MockInspectorAPIMockRecorder) ListAssessmentRunsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentRunsPages", reflect.TypeOf((*MockInspectorAPI)(nil).ListAssessmentRunsPages), arg0, arg1)
}

// ListAssessmentRunsPagesWithContext mocks base method
func (m *MockInspectorAPI) ListAssessmentRunsPagesWithContext(arg0 context.Context, arg1 *inspector.ListAssessmentRunsInput, arg2 func(*inspector.ListAssessmentRunsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessmentRunsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssessmentRunsPagesWithContext indicates an expected call of ListAssessmentRunsPagesWithContext
func (mr *MockInspectorAPIMockRecorder) ListAssessmentRunsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentRunsPagesWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).ListAssessmentRunsPagesWithContext), varargs...)
}

// ListAssessmentRunsRequest mocks base method
func (m *MockInspectorAPI) ListAssessmentRunsRequest(arg0 *inspector.ListAssessmentRunsInput) (*request.Request, *inspector.ListAssessmentRunsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentRunsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.ListAssessmentRunsOutput)
	return ret0, ret1
}

// ListAssessmentRunsRequest indicates an expected call of ListAssessmentRunsRequest
func (mr *MockInspectorAPIMockRecorder) ListAssessmentRunsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentRunsRequest", reflect.TypeOf((*MockInspectorAPI)(nil).ListAssessmentRunsRequest), arg0)
}

// ListAssessmentRunsWithContext mocks base method
func (m *MockInspectorAPI) ListAssessmentRunsWithContext(arg0 context.Context, arg1 *inspector.ListAssessmentRunsInput, arg2 ...request.Option) (*inspector.ListAssessmentRunsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessmentRunsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.ListAssessmentRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessmentRunsWithContext indicates an expected call of ListAssessmentRunsWithContext
func (mr *MockInspectorAPIMockRecorder) ListAssessmentRunsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentRunsWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).ListAssessmentRunsWithContext), varargs...)
}

// ListAssessmentTargets mocks base method
func (m *MockInspectorAPI) ListAssessmentTargets(arg0 *inspector.ListAssessmentTargetsInput) (*inspector.ListAssessmentTargetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentTargets", arg0)
	ret0, _ := ret[0].(*inspector.ListAssessmentTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessmentTargets indicates an expected call of ListAssessmentTargets
func (mr *MockInspectorAPIMockRecorder) ListAssessmentTargets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentTargets", reflect.TypeOf((*MockInspectorAPI)(nil).ListAssessmentTargets), arg0)
}

// ListAssessmentTargetsPages mocks base method
func (m *MockInspectorAPI) ListAssessmentTargetsPages(arg0 *inspector.ListAssessmentTargetsInput, arg1 func(*inspector.ListAssessmentTargetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentTargetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssessmentTargetsPages indicates an expected call of ListAssessmentTargetsPages
func (mr *MockInspectorAPIMockRecorder) ListAssessmentTargetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentTargetsPages", reflect.TypeOf((*MockInspectorAPI)(nil).ListAssessmentTargetsPages), arg0, arg1)
}

// ListAssessmentTargetsPagesWithContext mocks base method
func (m *MockInspectorAPI) ListAssessmentTargetsPagesWithContext(arg0 context.Context, arg1 *inspector.ListAssessmentTargetsInput, arg2 func(*inspector.ListAssessmentTargetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessmentTargetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssessmentTargetsPagesWithContext indicates an expected call of ListAssessmentTargetsPagesWithContext
func (mr *MockInspectorAPIMockRecorder) ListAssessmentTargetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentTargetsPagesWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).ListAssessmentTargetsPagesWithContext), varargs...)
}

// ListAssessmentTargetsRequest mocks base method
func (m *MockInspectorAPI) ListAssessmentTargetsRequest(arg0 *inspector.ListAssessmentTargetsInput) (*request.Request, *inspector.ListAssessmentTargetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentTargetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.ListAssessmentTargetsOutput)
	return ret0, ret1
}

// ListAssessmentTargetsRequest indicates an expected call of ListAssessmentTargetsRequest
func (mr *MockInspectorAPIMockRecorder) ListAssessmentTargetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentTargetsRequest", reflect.TypeOf((*MockInspectorAPI)(nil).ListAssessmentTargetsRequest), arg0)
}

// ListAssessmentTargetsWithContext mocks base method
func (m *MockInspectorAPI) ListAssessmentTargetsWithContext(arg0 context.Context, arg1 *inspector.ListAssessmentTargetsInput, arg2 ...request.Option) (*inspector.ListAssessmentTargetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessmentTargetsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.ListAssessmentTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessmentTargetsWithContext indicates an expected call of ListAssessmentTargetsWithContext
func (mr *MockInspectorAPIMockRecorder) ListAssessmentTargetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentTargetsWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).ListAssessmentTargetsWithContext), varargs...)
}

// ListAssessmentTemplates mocks base method
func (m *MockInspectorAPI) ListAssessmentTemplates(arg0 *inspector.ListAssessmentTemplatesInput) (*inspector.ListAssessmentTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentTemplates", arg0)
	ret0, _ := ret[0].(*inspector.ListAssessmentTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessmentTemplates indicates an expected call of ListAssessmentTemplates
func (mr *MockInspectorAPIMockRecorder) ListAssessmentTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentTemplates", reflect.TypeOf((*MockInspectorAPI)(nil).ListAssessmentTemplates), arg0)
}

// ListAssessmentTemplatesPages mocks base method
func (m *MockInspectorAPI) ListAssessmentTemplatesPages(arg0 *inspector.ListAssessmentTemplatesInput, arg1 func(*inspector.ListAssessmentTemplatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentTemplatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssessmentTemplatesPages indicates an expected call of ListAssessmentTemplatesPages
func (mr *MockInspectorAPIMockRecorder) ListAssessmentTemplatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentTemplatesPages", reflect.TypeOf((*MockInspectorAPI)(nil).ListAssessmentTemplatesPages), arg0, arg1)
}

// ListAssessmentTemplatesPagesWithContext mocks base method
func (m *MockInspectorAPI) ListAssessmentTemplatesPagesWithContext(arg0 context.Context, arg1 *inspector.ListAssessmentTemplatesInput, arg2 func(*inspector.ListAssessmentTemplatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessmentTemplatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssessmentTemplatesPagesWithContext indicates an expected call of ListAssessmentTemplatesPagesWithContext
func (mr *MockInspectorAPIMockRecorder) ListAssessmentTemplatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentTemplatesPagesWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).ListAssessmentTemplatesPagesWithContext), varargs...)
}

// ListAssessmentTemplatesRequest mocks base method
func (m *MockInspectorAPI) ListAssessmentTemplatesRequest(arg0 *inspector.ListAssessmentTemplatesInput) (*request.Request, *inspector.ListAssessmentTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.ListAssessmentTemplatesOutput)
	return ret0, ret1
}

// ListAssessmentTemplatesRequest indicates an expected call of ListAssessmentTemplatesRequest
func (mr *MockInspectorAPIMockRecorder) ListAssessmentTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentTemplatesRequest", reflect.TypeOf((*MockInspectorAPI)(nil).ListAssessmentTemplatesRequest), arg0)
}

// ListAssessmentTemplatesWithContext mocks base method
func (m *MockInspectorAPI) ListAssessmentTemplatesWithContext(arg0 context.Context, arg1 *inspector.ListAssessmentTemplatesInput, arg2 ...request.Option) (*inspector.ListAssessmentTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessmentTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.ListAssessmentTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessmentTemplatesWithContext indicates an expected call of ListAssessmentTemplatesWithContext
func (mr *MockInspectorAPIMockRecorder) ListAssessmentTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentTemplatesWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).ListAssessmentTemplatesWithContext), varargs...)
}

// ListEventSubscriptions mocks base method
func (m *MockInspectorAPI) ListEventSubscriptions(arg0 *inspector.ListEventSubscriptionsInput) (*inspector.ListEventSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventSubscriptions", arg0)
	ret0, _ := ret[0].(*inspector.ListEventSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventSubscriptions indicates an expected call of ListEventSubscriptions
func (mr *MockInspectorAPIMockRecorder) ListEventSubscriptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventSubscriptions", reflect.TypeOf((*MockInspectorAPI)(nil).ListEventSubscriptions), arg0)
}

// ListEventSubscriptionsPages mocks base method
func (m *MockInspectorAPI) ListEventSubscriptionsPages(arg0 *inspector.ListEventSubscriptionsInput, arg1 func(*inspector.ListEventSubscriptionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventSubscriptionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEventSubscriptionsPages indicates an expected call of ListEventSubscriptionsPages
func (mr *MockInspectorAPIMockRecorder) ListEventSubscriptionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventSubscriptionsPages", reflect.TypeOf((*MockInspectorAPI)(nil).ListEventSubscriptionsPages), arg0, arg1)
}

// ListEventSubscriptionsPagesWithContext mocks base method
func (m *MockInspectorAPI) ListEventSubscriptionsPagesWithContext(arg0 context.Context, arg1 *inspector.ListEventSubscriptionsInput, arg2 func(*inspector.ListEventSubscriptionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEventSubscriptionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEventSubscriptionsPagesWithContext indicates an expected call of ListEventSubscriptionsPagesWithContext
func (mr *MockInspectorAPIMockRecorder) ListEventSubscriptionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventSubscriptionsPagesWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).ListEventSubscriptionsPagesWithContext), varargs...)
}

// ListEventSubscriptionsRequest mocks base method
func (m *MockInspectorAPI) ListEventSubscriptionsRequest(arg0 *inspector.ListEventSubscriptionsInput) (*request.Request, *inspector.ListEventSubscriptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventSubscriptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.ListEventSubscriptionsOutput)
	return ret0, ret1
}

// ListEventSubscriptionsRequest indicates an expected call of ListEventSubscriptionsRequest
func (mr *MockInspectorAPIMockRecorder) ListEventSubscriptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventSubscriptionsRequest", reflect.TypeOf((*MockInspectorAPI)(nil).ListEventSubscriptionsRequest), arg0)
}

// ListEventSubscriptionsWithContext mocks base method
func (m *MockInspectorAPI) ListEventSubscriptionsWithContext(arg0 context.Context, arg1 *inspector.ListEventSubscriptionsInput, arg2 ...request.Option) (*inspector.ListEventSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEventSubscriptionsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.ListEventSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventSubscriptionsWithContext indicates an expected call of ListEventSubscriptionsWithContext
func (mr *MockInspectorAPIMockRecorder) ListEventSubscriptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventSubscriptionsWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).ListEventSubscriptionsWithContext), varargs...)
}

// ListExclusions mocks base method
func (m *MockInspectorAPI) ListExclusions(arg0 *inspector.ListExclusionsInput) (*inspector.ListExclusionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExclusions", arg0)
	ret0, _ := ret[0].(*inspector.ListExclusionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExclusions indicates an expected call of ListExclusions
func (mr *MockInspectorAPIMockRecorder) ListExclusions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExclusions", reflect.TypeOf((*MockInspectorAPI)(nil).ListExclusions), arg0)
}

// ListExclusionsPages mocks base method
func (m *MockInspectorAPI) ListExclusionsPages(arg0 *inspector.ListExclusionsInput, arg1 func(*inspector.ListExclusionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExclusionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExclusionsPages indicates an expected call of ListExclusionsPages
func (mr *MockInspectorAPIMockRecorder) ListExclusionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExclusionsPages", reflect.TypeOf((*MockInspectorAPI)(nil).ListExclusionsPages), arg0, arg1)
}

// ListExclusionsPagesWithContext mocks base method
func (m *MockInspectorAPI) ListExclusionsPagesWithContext(arg0 context.Context, arg1 *inspector.ListExclusionsInput, arg2 func(*inspector.ListExclusionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExclusionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExclusionsPagesWithContext indicates an expected call of ListExclusionsPagesWithContext
func (mr *MockInspectorAPIMockRecorder) ListExclusionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExclusionsPagesWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).ListExclusionsPagesWithContext), varargs...)
}

// ListExclusionsRequest mocks base method
func (m *MockInspectorAPI) ListExclusionsRequest(arg0 *inspector.ListExclusionsInput) (*request.Request, *inspector.ListExclusionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExclusionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.ListExclusionsOutput)
	return ret0, ret1
}

// ListExclusionsRequest indicates an expected call of ListExclusionsRequest
func (mr *MockInspectorAPIMockRecorder) ListExclusionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExclusionsRequest", reflect.TypeOf((*MockInspectorAPI)(nil).ListExclusionsRequest), arg0)
}

// ListExclusionsWithContext mocks base method
func (m *MockInspectorAPI) ListExclusionsWithContext(arg0 context.Context, arg1 *inspector.ListExclusionsInput, arg2 ...request.Option) (*inspector.ListExclusionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExclusionsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.ListExclusionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExclusionsWithContext indicates an expected call of ListExclusionsWithContext
func (mr *MockInspectorAPIMockRecorder) ListExclusionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExclusionsWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).ListExclusionsWithContext), varargs...)
}

// ListFindings mocks base method
func (m *MockInspectorAPI) ListFindings(arg0 *inspector.ListFindingsInput) (*inspector.ListFindingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindings", arg0)
	ret0, _ := ret[0].(*inspector.ListFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFindings indicates an expected call of ListFindings
func (mr *MockInspectorAPIMockRecorder) ListFindings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindings", reflect.TypeOf((*MockInspectorAPI)(nil).ListFindings), arg0)
}

// ListFindingsPages mocks base method
func (m *MockInspectorAPI) ListFindingsPages(arg0 *inspector.ListFindingsInput, arg1 func(*inspector.ListFindingsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFindingsPages indicates an expected call of ListFindingsPages
func (mr *MockInspectorAPIMockRecorder) ListFindingsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsPages", reflect.TypeOf((*MockInspectorAPI)(nil).ListFindingsPages), arg0, arg1)
}

// ListFindingsPagesWithContext mocks base method
func (m *MockInspectorAPI) ListFindingsPagesWithContext(arg0 context.Context, arg1 *inspector.ListFindingsInput, arg2 func(*inspector.ListFindingsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFindingsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFindingsPagesWithContext indicates an expected call of ListFindingsPagesWithContext
func (mr *MockInspectorAPIMockRecorder) ListFindingsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsPagesWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).ListFindingsPagesWithContext), varargs...)
}

// ListFindingsRequest mocks base method
func (m *MockInspectorAPI) ListFindingsRequest(arg0 *inspector.ListFindingsInput) (*request.Request, *inspector.ListFindingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.ListFindingsOutput)
	return ret0, ret1
}

// ListFindingsRequest indicates an expected call of ListFindingsRequest
func (mr *MockInspectorAPIMockRecorder) ListFindingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsRequest", reflect.TypeOf((*MockInspectorAPI)(nil).ListFindingsRequest), arg0)
}

// ListFindingsWithContext mocks base method
func (m *MockInspectorAPI) ListFindingsWithContext(arg0 context.Context, arg1 *inspector.ListFindingsInput, arg2 ...request.Option) (*inspector.ListFindingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFindingsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.ListFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFindingsWithContext indicates an expected call of ListFindingsWithContext
func (mr *MockInspectorAPIMockRecorder) ListFindingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).ListFindingsWithContext), varargs...)
}

// ListRulesPackages mocks base method
func (m *MockInspectorAPI) ListRulesPackages(arg0 *inspector.ListRulesPackagesInput) (*inspector.ListRulesPackagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRulesPackages", arg0)
	ret0, _ := ret[0].(*inspector.ListRulesPackagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRulesPackages indicates an expected call of ListRulesPackages
func (mr *MockInspectorAPIMockRecorder) ListRulesPackages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesPackages", reflect.TypeOf((*MockInspectorAPI)(nil).ListRulesPackages), arg0)
}

// ListRulesPackagesPages mocks base method
func (m *MockInspectorAPI) ListRulesPackagesPages(arg0 *inspector.ListRulesPackagesInput, arg1 func(*inspector.ListRulesPackagesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRulesPackagesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRulesPackagesPages indicates an expected call of ListRulesPackagesPages
func (mr *MockInspectorAPIMockRecorder) ListRulesPackagesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesPackagesPages", reflect.TypeOf((*MockInspectorAPI)(nil).ListRulesPackagesPages), arg0, arg1)
}

// ListRulesPackagesPagesWithContext mocks base method
func (m *MockInspectorAPI) ListRulesPackagesPagesWithContext(arg0 context.Context, arg1 *inspector.ListRulesPackagesInput, arg2 func(*inspector.ListRulesPackagesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRulesPackagesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRulesPackagesPagesWithContext indicates an expected call of ListRulesPackagesPagesWithContext
func (mr *MockInspectorAPIMockRecorder) ListRulesPackagesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesPackagesPagesWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).ListRulesPackagesPagesWithContext), varargs...)
}

// ListRulesPackagesRequest mocks base method
func (m *MockInspectorAPI) ListRulesPackagesRequest(arg0 *inspector.ListRulesPackagesInput) (*request.Request, *inspector.ListRulesPackagesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRulesPackagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.ListRulesPackagesOutput)
	return ret0, ret1
}

// ListRulesPackagesRequest indicates an expected call of ListRulesPackagesRequest
func (mr *MockInspectorAPIMockRecorder) ListRulesPackagesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesPackagesRequest", reflect.TypeOf((*MockInspectorAPI)(nil).ListRulesPackagesRequest), arg0)
}

// ListRulesPackagesWithContext mocks base method
func (m *MockInspectorAPI) ListRulesPackagesWithContext(arg0 context.Context, arg1 *inspector.ListRulesPackagesInput, arg2 ...request.Option) (*inspector.ListRulesPackagesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRulesPackagesWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.ListRulesPackagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRulesPackagesWithContext indicates an expected call of ListRulesPackagesWithContext
func (mr *MockInspectorAPIMockRecorder) ListRulesPackagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesPackagesWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).ListRulesPackagesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockInspectorAPI) ListTagsForResource(arg0 *inspector.ListTagsForResourceInput) (*inspector.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*inspector.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockInspectorAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockInspectorAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockInspectorAPI) ListTagsForResourceRequest(arg0 *inspector.ListTagsForResourceInput) (*request.Request, *inspector.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockInspectorAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockInspectorAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockInspectorAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *inspector.ListTagsForResourceInput, arg2 ...request.Option) (*inspector.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockInspectorAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PreviewAgents mocks base method
func (m *MockInspectorAPI) PreviewAgents(arg0 *inspector.PreviewAgentsInput) (*inspector.PreviewAgentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreviewAgents", arg0)
	ret0, _ := ret[0].(*inspector.PreviewAgentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreviewAgents indicates an expected call of PreviewAgents
func (mr *MockInspectorAPIMockRecorder) PreviewAgents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreviewAgents", reflect.TypeOf((*MockInspectorAPI)(nil).PreviewAgents), arg0)
}

// PreviewAgentsPages mocks base method
func (m *MockInspectorAPI) PreviewAgentsPages(arg0 *inspector.PreviewAgentsInput, arg1 func(*inspector.PreviewAgentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreviewAgentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreviewAgentsPages indicates an expected call of PreviewAgentsPages
func (mr *MockInspectorAPIMockRecorder) PreviewAgentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreviewAgentsPages", reflect.TypeOf((*MockInspectorAPI)(nil).PreviewAgentsPages), arg0, arg1)
}

// PreviewAgentsPagesWithContext mocks base method
func (m *MockInspectorAPI) PreviewAgentsPagesWithContext(arg0 context.Context, arg1 *inspector.PreviewAgentsInput, arg2 func(*inspector.PreviewAgentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PreviewAgentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreviewAgentsPagesWithContext indicates an expected call of PreviewAgentsPagesWithContext
func (mr *MockInspectorAPIMockRecorder) PreviewAgentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreviewAgentsPagesWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).PreviewAgentsPagesWithContext), varargs...)
}

// PreviewAgentsRequest mocks base method
func (m *MockInspectorAPI) PreviewAgentsRequest(arg0 *inspector.PreviewAgentsInput) (*request.Request, *inspector.PreviewAgentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreviewAgentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.PreviewAgentsOutput)
	return ret0, ret1
}

// PreviewAgentsRequest indicates an expected call of PreviewAgentsRequest
func (mr *MockInspectorAPIMockRecorder) PreviewAgentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreviewAgentsRequest", reflect.TypeOf((*MockInspectorAPI)(nil).PreviewAgentsRequest), arg0)
}

// PreviewAgentsWithContext mocks base method
func (m *MockInspectorAPI) PreviewAgentsWithContext(arg0 context.Context, arg1 *inspector.PreviewAgentsInput, arg2 ...request.Option) (*inspector.PreviewAgentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PreviewAgentsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.PreviewAgentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreviewAgentsWithContext indicates an expected call of PreviewAgentsWithContext
func (mr *MockInspectorAPIMockRecorder) PreviewAgentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreviewAgentsWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).PreviewAgentsWithContext), varargs...)
}

// RegisterCrossAccountAccessRole mocks base method
func (m *MockInspectorAPI) RegisterCrossAccountAccessRole(arg0 *inspector.RegisterCrossAccountAccessRoleInput) (*inspector.RegisterCrossAccountAccessRoleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCrossAccountAccessRole", arg0)
	ret0, _ := ret[0].(*inspector.RegisterCrossAccountAccessRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterCrossAccountAccessRole indicates an expected call of RegisterCrossAccountAccessRole
func (mr *MockInspectorAPIMockRecorder) RegisterCrossAccountAccessRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCrossAccountAccessRole", reflect.TypeOf((*MockInspectorAPI)(nil).RegisterCrossAccountAccessRole), arg0)
}

// RegisterCrossAccountAccessRoleRequest mocks base method
func (m *MockInspectorAPI) RegisterCrossAccountAccessRoleRequest(arg0 *inspector.RegisterCrossAccountAccessRoleInput) (*request.Request, *inspector.RegisterCrossAccountAccessRoleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCrossAccountAccessRoleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.RegisterCrossAccountAccessRoleOutput)
	return ret0, ret1
}

// RegisterCrossAccountAccessRoleRequest indicates an expected call of RegisterCrossAccountAccessRoleRequest
func (mr *MockInspectorAPIMockRecorder) RegisterCrossAccountAccessRoleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCrossAccountAccessRoleRequest", reflect.TypeOf((*MockInspectorAPI)(nil).RegisterCrossAccountAccessRoleRequest), arg0)
}

// RegisterCrossAccountAccessRoleWithContext mocks base method
func (m *MockInspectorAPI) RegisterCrossAccountAccessRoleWithContext(arg0 context.Context, arg1 *inspector.RegisterCrossAccountAccessRoleInput, arg2 ...request.Option) (*inspector.RegisterCrossAccountAccessRoleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterCrossAccountAccessRoleWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.RegisterCrossAccountAccessRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterCrossAccountAccessRoleWithContext indicates an expected call of RegisterCrossAccountAccessRoleWithContext
func (mr *MockInspectorAPIMockRecorder) RegisterCrossAccountAccessRoleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCrossAccountAccessRoleWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).RegisterCrossAccountAccessRoleWithContext), varargs...)
}

// RemoveAttributesFromFindings mocks base method
func (m *MockInspectorAPI) RemoveAttributesFromFindings(arg0 *inspector.RemoveAttributesFromFindingsInput) (*inspector.RemoveAttributesFromFindingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAttributesFromFindings", arg0)
	ret0, _ := ret[0].(*inspector.RemoveAttributesFromFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAttributesFromFindings indicates an expected call of RemoveAttributesFromFindings
func (mr *MockInspectorAPIMockRecorder) RemoveAttributesFromFindings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAttributesFromFindings", reflect.TypeOf((*MockInspectorAPI)(nil).RemoveAttributesFromFindings), arg0)
}

// RemoveAttributesFromFindingsRequest mocks base method
func (m *MockInspectorAPI) RemoveAttributesFromFindingsRequest(arg0 *inspector.RemoveAttributesFromFindingsInput) (*request.Request, *inspector.RemoveAttributesFromFindingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAttributesFromFindingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.RemoveAttributesFromFindingsOutput)
	return ret0, ret1
}

// RemoveAttributesFromFindingsRequest indicates an expected call of RemoveAttributesFromFindingsRequest
func (mr *MockInspectorAPIMockRecorder) RemoveAttributesFromFindingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAttributesFromFindingsRequest", reflect.TypeOf((*MockInspectorAPI)(nil).RemoveAttributesFromFindingsRequest), arg0)
}

// RemoveAttributesFromFindingsWithContext mocks base method
func (m *MockInspectorAPI) RemoveAttributesFromFindingsWithContext(arg0 context.Context, arg1 *inspector.RemoveAttributesFromFindingsInput, arg2 ...request.Option) (*inspector.RemoveAttributesFromFindingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveAttributesFromFindingsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.RemoveAttributesFromFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAttributesFromFindingsWithContext indicates an expected call of RemoveAttributesFromFindingsWithContext
func (mr *MockInspectorAPIMockRecorder) RemoveAttributesFromFindingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAttributesFromFindingsWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).RemoveAttributesFromFindingsWithContext), varargs...)
}

// SetTagsForResource mocks base method
func (m *MockInspectorAPI) SetTagsForResource(arg0 *inspector.SetTagsForResourceInput) (*inspector.SetTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTagsForResource", arg0)
	ret0, _ := ret[0].(*inspector.SetTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTagsForResource indicates an expected call of SetTagsForResource
func (mr *MockInspectorAPIMockRecorder) SetTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTagsForResource", reflect.TypeOf((*MockInspectorAPI)(nil).SetTagsForResource), arg0)
}

// SetTagsForResourceRequest mocks base method
func (m *MockInspectorAPI) SetTagsForResourceRequest(arg0 *inspector.SetTagsForResourceInput) (*request.Request, *inspector.SetTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.SetTagsForResourceOutput)
	return ret0, ret1
}

// SetTagsForResourceRequest indicates an expected call of SetTagsForResourceRequest
func (mr *MockInspectorAPIMockRecorder) SetTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTagsForResourceRequest", reflect.TypeOf((*MockInspectorAPI)(nil).SetTagsForResourceRequest), arg0)
}

// SetTagsForResourceWithContext mocks base method
func (m *MockInspectorAPI) SetTagsForResourceWithContext(arg0 context.Context, arg1 *inspector.SetTagsForResourceInput, arg2 ...request.Option) (*inspector.SetTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.SetTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTagsForResourceWithContext indicates an expected call of SetTagsForResourceWithContext
func (mr *MockInspectorAPIMockRecorder) SetTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTagsForResourceWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).SetTagsForResourceWithContext), varargs...)
}

// StartAssessmentRun mocks base method
func (m *MockInspectorAPI) StartAssessmentRun(arg0 *inspector.StartAssessmentRunInput) (*inspector.StartAssessmentRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAssessmentRun", arg0)
	ret0, _ := ret[0].(*inspector.StartAssessmentRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAssessmentRun indicates an expected call of StartAssessmentRun
func (mr *MockInspectorAPIMockRecorder) StartAssessmentRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAssessmentRun", reflect.TypeOf((*MockInspectorAPI)(nil).StartAssessmentRun), arg0)
}

// StartAssessmentRunRequest mocks base method
func (m *MockInspectorAPI) StartAssessmentRunRequest(arg0 *inspector.StartAssessmentRunInput) (*request.Request, *inspector.StartAssessmentRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAssessmentRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.StartAssessmentRunOutput)
	return ret0, ret1
}

// StartAssessmentRunRequest indicates an expected call of StartAssessmentRunRequest
func (mr *MockInspectorAPIMockRecorder) StartAssessmentRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAssessmentRunRequest", reflect.TypeOf((*MockInspectorAPI)(nil).StartAssessmentRunRequest), arg0)
}

// StartAssessmentRunWithContext mocks base method
func (m *MockInspectorAPI) StartAssessmentRunWithContext(arg0 context.Context, arg1 *inspector.StartAssessmentRunInput, arg2 ...request.Option) (*inspector.StartAssessmentRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartAssessmentRunWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.StartAssessmentRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAssessmentRunWithContext indicates an expected call of StartAssessmentRunWithContext
func (mr *MockInspectorAPIMockRecorder) StartAssessmentRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAssessmentRunWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).StartAssessmentRunWithContext), varargs...)
}

// StopAssessmentRun mocks base method
func (m *MockInspectorAPI) StopAssessmentRun(arg0 *inspector.StopAssessmentRunInput) (*inspector.StopAssessmentRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopAssessmentRun", arg0)
	ret0, _ := ret[0].(*inspector.StopAssessmentRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopAssessmentRun indicates an expected call of StopAssessmentRun
func (mr *MockInspectorAPIMockRecorder) StopAssessmentRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAssessmentRun", reflect.TypeOf((*MockInspectorAPI)(nil).StopAssessmentRun), arg0)
}

// StopAssessmentRunRequest mocks base method
func (m *MockInspectorAPI) StopAssessmentRunRequest(arg0 *inspector.StopAssessmentRunInput) (*request.Request, *inspector.StopAssessmentRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopAssessmentRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.StopAssessmentRunOutput)
	return ret0, ret1
}

// StopAssessmentRunRequest indicates an expected call of StopAssessmentRunRequest
func (mr *MockInspectorAPIMockRecorder) StopAssessmentRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAssessmentRunRequest", reflect.TypeOf((*MockInspectorAPI)(nil).StopAssessmentRunRequest), arg0)
}

// StopAssessmentRunWithContext mocks base method
func (m *MockInspectorAPI) StopAssessmentRunWithContext(arg0 context.Context, arg1 *inspector.StopAssessmentRunInput, arg2 ...request.Option) (*inspector.StopAssessmentRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopAssessmentRunWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.StopAssessmentRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopAssessmentRunWithContext indicates an expected call of StopAssessmentRunWithContext
func (mr *MockInspectorAPIMockRecorder) StopAssessmentRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAssessmentRunWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).StopAssessmentRunWithContext), varargs...)
}

// SubscribeToEvent mocks base method
func (m *MockInspectorAPI) SubscribeToEvent(arg0 *inspector.SubscribeToEventInput) (*inspector.SubscribeToEventOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToEvent", arg0)
	ret0, _ := ret[0].(*inspector.SubscribeToEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToEvent indicates an expected call of SubscribeToEvent
func (mr *MockInspectorAPIMockRecorder) SubscribeToEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToEvent", reflect.TypeOf((*MockInspectorAPI)(nil).SubscribeToEvent), arg0)
}

// SubscribeToEventRequest mocks base method
func (m *MockInspectorAPI) SubscribeToEventRequest(arg0 *inspector.SubscribeToEventInput) (*request.Request, *inspector.SubscribeToEventOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToEventRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.SubscribeToEventOutput)
	return ret0, ret1
}

// SubscribeToEventRequest indicates an expected call of SubscribeToEventRequest
func (mr *MockInspectorAPIMockRecorder) SubscribeToEventRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToEventRequest", reflect.TypeOf((*MockInspectorAPI)(nil).SubscribeToEventRequest), arg0)
}

// SubscribeToEventWithContext mocks base method
func (m *MockInspectorAPI) SubscribeToEventWithContext(arg0 context.Context, arg1 *inspector.SubscribeToEventInput, arg2 ...request.Option) (*inspector.SubscribeToEventOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeToEventWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.SubscribeToEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToEventWithContext indicates an expected call of SubscribeToEventWithContext
func (mr *MockInspectorAPIMockRecorder) SubscribeToEventWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToEventWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).SubscribeToEventWithContext), varargs...)
}

// UnsubscribeFromEvent mocks base method
func (m *MockInspectorAPI) UnsubscribeFromEvent(arg0 *inspector.UnsubscribeFromEventInput) (*inspector.UnsubscribeFromEventOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsubscribeFromEvent", arg0)
	ret0, _ := ret[0].(*inspector.UnsubscribeFromEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnsubscribeFromEvent indicates an expected call of UnsubscribeFromEvent
func (mr *MockInspectorAPIMockRecorder) UnsubscribeFromEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeFromEvent", reflect.TypeOf((*MockInspectorAPI)(nil).UnsubscribeFromEvent), arg0)
}

// UnsubscribeFromEventRequest mocks base method
func (m *MockInspectorAPI) UnsubscribeFromEventRequest(arg0 *inspector.UnsubscribeFromEventInput) (*request.Request, *inspector.UnsubscribeFromEventOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsubscribeFromEventRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.UnsubscribeFromEventOutput)
	return ret0, ret1
}

// UnsubscribeFromEventRequest indicates an expected call of UnsubscribeFromEventRequest
func (mr *MockInspectorAPIMockRecorder) UnsubscribeFromEventRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeFromEventRequest", reflect.TypeOf((*MockInspectorAPI)(nil).UnsubscribeFromEventRequest), arg0)
}

// UnsubscribeFromEventWithContext mocks base method
func (m *MockInspectorAPI) UnsubscribeFromEventWithContext(arg0 context.Context, arg1 *inspector.UnsubscribeFromEventInput, arg2 ...request.Option) (*inspector.UnsubscribeFromEventOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsubscribeFromEventWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.UnsubscribeFromEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnsubscribeFromEventWithContext indicates an expected call of UnsubscribeFromEventWithContext
func (mr *MockInspectorAPIMockRecorder) UnsubscribeFromEventWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeFromEventWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).UnsubscribeFromEventWithContext), varargs...)
}

// UpdateAssessmentTarget mocks base method
func (m *MockInspectorAPI) UpdateAssessmentTarget(arg0 *inspector.UpdateAssessmentTargetInput) (*inspector.UpdateAssessmentTargetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssessmentTarget", arg0)
	ret0, _ := ret[0].(*inspector.UpdateAssessmentTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssessmentTarget indicates an expected call of UpdateAssessmentTarget
func (mr *MockInspectorAPIMockRecorder) UpdateAssessmentTarget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssessmentTarget", reflect.TypeOf((*MockInspectorAPI)(nil).UpdateAssessmentTarget), arg0)
}

// UpdateAssessmentTargetRequest mocks base method
func (m *MockInspectorAPI) UpdateAssessmentTargetRequest(arg0 *inspector.UpdateAssessmentTargetInput) (*request.Request, *inspector.UpdateAssessmentTargetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssessmentTargetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector.UpdateAssessmentTargetOutput)
	return ret0, ret1
}

// UpdateAssessmentTargetRequest indicates an expected call of UpdateAssessmentTargetRequest
func (mr *MockInspectorAPIMockRecorder) UpdateAssessmentTargetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssessmentTargetRequest", reflect.TypeOf((*MockInspectorAPI)(nil).UpdateAssessmentTargetRequest), arg0)
}

// UpdateAssessmentTargetWithContext mocks base method
func (m *MockInspectorAPI) UpdateAssessmentTargetWithContext(arg0 context.Context, arg1 *inspector.UpdateAssessmentTargetInput, arg2 ...request.Option) (*inspector.UpdateAssessmentTargetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAssessmentTargetWithContext", varargs...)
	ret0, _ := ret[0].(*inspector.UpdateAssessmentTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssessmentTargetWithContext indicates an expected call of UpdateAssessmentTargetWithContext
func (mr *MockInspectorAPIMockRecorder) UpdateAssessmentTargetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssessmentTargetWithContext", reflect.TypeOf((*MockInspectorAPI)(nil).UpdateAssessmentTargetWithContext), varargs...)
}
